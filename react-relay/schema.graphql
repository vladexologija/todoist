schema {
  query: Root
  mutation: Mutation
}

input AddProjectInput {
  name: String!
  clientMutationId: String
}

type AddProjectPayload {
  project: ProjectsEdge
  viewer: user
  clientMutationId: String
}

input AddTodoInput {
  content: String!
  clientMutationId: String
}

type AddTodoPayload {
  todo: TodosEdge
  viewer: user
  clientMutationId: String
}

# A connection to a list of items.
type ItemProjectsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ItemProjectsEdge]
}

# An edge in a connection.
type ItemProjectsEdge {
  # The item at the end of the edge
  node: project

  # A cursor for use in pagination
  cursor: String!
}

type Mutation {
  addProject(input: AddProjectInput!): AddProjectPayload
  addTodo(input: AddTodoInput!): AddTodoPayload
  renameProject(input: RenameProjectInput!): RenameProjectPayload
  updateTodo(input: UpdateTodoInput!): UpdateTodoPayload
  removeProject(input: RemoveProjectInput!): RemoveProjectPayload
  removeTodo(input: RemoveTodoInput!): RemoveTodoPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

# todo project
type project implements Node {
  # The ID of an object
  id: ID!

  # The name of the project.
  name: String

  # The color of the project.
  color: String
}

# A connection to a list of items.
type ProjectsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ProjectsEdge]
  totalCount: Int
}

# An edge in a connection.
type ProjectsEdge {
  # The item at the end of the edge
  node: project

  # A cursor for use in pagination
  cursor: String!
}

input RemoveProjectInput {
  id: ID!
  clientMutationId: String
}

type RemoveProjectPayload {
  projectId: ID
  viewer: user
  clientMutationId: String
}

input RemoveTodoInput {
  id: ID!
  clientMutationId: String
}

type RemoveTodoPayload {
  todoId: ID
  viewer: user
  clientMutationId: String
}

input RenameProjectInput {
  id: ID!
  name: String!
  clientMutationId: String
}

type RenameProjectPayload {
  project: project
  viewer: user
  clientMutationId: String
}

type Root {
  viewer: user

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

# todo item
type todo implements Node {
  # The ID of an object
  id: ID!

  # The content of the todo.
  content: String

  # Checked todo? 
  checked: Boolean
  projectConnection(after: String, first: Int, before: String, last: Int): ItemProjectsConnection
}

# A connection to a list of items.
type TodosConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TodosEdge]
  totalCount: Int
}

# An edge in a connection.
type TodosEdge {
  # The item at the end of the edge
  node: todo

  # A cursor for use in pagination
  cursor: String!
}

input UpdateTodoInput {
  id: ID!
  checked: Boolean!
  content: String!
  clientMutationId: String
}

type UpdateTodoPayload {
  todo: todo
  viewer: user
  clientMutationId: String
}

# system user
type user implements Node {
  # The ID of an object
  id: ID!
  allProjects(after: String, first: Int, before: String, last: Int): ProjectsConnection
  allTodos(after: String, first: Int, before: String, last: Int): TodosConnection
  todo(id: ID): todo
  project(id: ID): project
}

